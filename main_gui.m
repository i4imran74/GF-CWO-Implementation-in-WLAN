function varargout = main_gui(varargin)
% MAIN_GUI MATLAB code for main_gui.fig
%      MAIN_GUI, by itself, creates a new MAIN_GUI or raises the existing
%      singleton*.
%
%      H = MAIN_GUI returns the handle to a new MAIN_GUI or the handle to
%      the existing singleton*.
%
%      MAIN_GUI('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in MAIN_GUI.M with the given input arguments.
%
%      MAIN_GUI('Property','Value',...) creates a new MAIN_GUI or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before main_gui_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to main_gui_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help main_gui

% Last Modified by GUIDE v2.5 23-Feb-2018 09:01:40

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @main_gui_OpeningFcn, ...
                   'gui_OutputFcn',  @main_gui_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before main_gui is made visible.
function main_gui_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to main_gui (see VARARGIN)

% Choose default command line output for main_gui
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);



% UIWAIT makes main_gui wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = main_gui_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;



% --- Executes on button press in pushbutton1.
function pushbutton1_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

%%%  Start Processing %%%%

var_ntopo = str2double(get(handles.edt_ntopo,'String'));
var_nsize = str2double(get(handles.edt_nsize,'String'));
var_itraffic = str2double(get(handles.edt_itraffic,'String'));

% Process data generated by sim1.m (different network size)

z=1.960;    % 95% confidence interval % z=2.576;    % 99% confidence interval
z2 = 0.5;  % confidence interval mark length

log_file = 'log_crosslayer_';
% % ntopo = 2;
% % nsize = 2;
% % itraffic = 5;
ntopo = var_ntopo;
nsize = var_nsize;
itraffic = var_itraffic;

successrate = [];
responsetime = [];
responsetimez = [];
hopcount = [];
hopcountz = [];
throughput=[];   %%--kabeer
rreqrrep = [];
for isize = 10:10:(10+10*(nsize-1))
    n = isize;
    fid = fopen([log_file, num2str(n)], 'r');
    if fid == -1, error('Cannot open log file'); end
    a = fscanf(fid, '%d %d %g %d %d %d \n', [6, inf]);
    fclose(fid);
    a = sortrows(a', [1 2 3]);
    b = [];
    j = 0;
    for i = 1:(size(a, 1)-1)
        if sum(a(i, [1 2 5 6])==a(i+1, [1 2 5 6]))==4 & a(i, 4)==0
            % got reply
            ttime = a(i+1, 3) - a(i, 3);
            thop = a(i+1, 4);
            j = j + 1;
            b(j, :) = [a(i, 1) a(i, 2) ttime thop];
            i = i + 1;
        end
    end
    k = n/10;
    successrate(k) = j/(itraffic*ntopo);
    if isempty(b)
        responsetime(k) = 0;
        responsetimez(k) = 0;
        hopcount(k) = 0;
        hopcountz(k) = 0;
    else
        responsetime(k) = mean(b(:, 3)); %%-- mean of transmission time
        responsetimez(k) = z*std(b(:, 3), 1, 1)/sqrt(j);
        hopcount(k) = mean(b(:, 4));
        throughput(k) = mean(b(:, 4));
        hopcountz(k) = z*std(b(:, 4), 1, 1)/sqrt(j);
    end
    fid = fopen([log_file, num2str(n) '_rreqrrep'], 'r');
    if fid == -1, error('Cannot open log file'); end
    a = fscanf(fid, '%d %d %d %d %d %d %d %d %d %d %d %d %d %d \n', [14, inf]);
    fclose(fid);
    a = sortrows(a', [1]);
    rreqrrep(k, :) = mean(a(:, 2:14), 1);
end

% colordef none,  whitebg

axes(handles.axes1);
cla;
%figure(1);
hold on;
set(gca,'Box','on');
PT = plot(10:10:nsize*10, 100-(successrate * 100), 'bo-', 'LineWidth', 2, 'MarkerFaceColor', 'b', 'MarkerSize', 5);
Xla = xlabel('Number of Nodes');
set(Xla,'FontSize', 12);
Yla = ylabel('Collion rate (%)');
set(Yla,'FontSize', 12);

axes(handles.axes2);
cla;
%figure(2);
hold on;
set(gca,'Box','on');
PT = plot(10:10:nsize*10, responsetime, 'ro-', 'LineWidth', 2, 'MarkerFaceColor', 'g', 'MarkerEdgeColor', 'k', 'MarkerSize', 5);
Xla = xlabel('Number of Nodes');
set(Xla,'FontSize', 12);
Yla = ylabel('Delay (sec.)');
set(Yla,'FontSize', 12);
for x=1:nsize
    i = 10+10*(x-1);
    line([i, i], [responsetime(x)-responsetimez(x), responsetime(x)+responsetimez(x)], 'LineWidth', 0.5, 'Color', 'k', 'LineStyle', '-');
    line([i-z2, i+z2], [responsetime(x)-responsetimez(x), responsetime(x)-responsetimez(x)], 'LineWidth', 1, 'Color', 'k');
    line([i-z2, i+z2], [responsetime(x)+responsetimez(x), responsetime(x)+responsetimez(x)], 'LineWidth', 1, 'Color', 'k');
end

axes(handles.axes3);
cla;
%figure(3);
hold on;
set(gca,'Box','on');
PT = plot(10:10:nsize*10, hopcount, 'bo-', 'LineWidth', 2, 'MarkerFaceColor', 'g', 'MarkerEdgeColor', 'k', 'MarkerSize', 5);
Xla = xlabel('Number of Nodes');
set(Xla,'FontSize', 12);
Yla = ylabel('Throughput');
set(Yla,'FontSize', 12);
for x=1:nsize
    i = 10+10*(x-1);
    line([i, i], [hopcount(x)-hopcountz(x), hopcount(x)+hopcountz(x)], 'LineWidth', 0.5, 'Color', 'k', 'LineStyle', '-');
    line([i-z2, i+z2], [hopcount(x)-hopcountz(x), hopcount(x)-hopcountz(x)], 'LineWidth', 1, 'Color', 'k');
    line([i-z2, i+z2], [hopcount(x)+hopcountz(x), hopcount(x)+hopcountz(x)], 'LineWidth', 1, 'Color', 'k');
end

%%%  End Processing %%%%

% --- Executes on button press in pushbutton2.
function pushbutton2_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)



var_max_time = str2double(get(handles.edt_max_time,'String'));
var_ntopo = str2double(get(handles.edt_ntopo,'String'));
var_nsize = str2double(get(handles.edt_nsize,'String'));
var_itraffic = str2double(get(handles.edt_itraffic,'String'));


%%%  Simulation Started %%%%
% Simulation for different network size

%clear;
% Initialize random number generator
rand('state', 0);
randn('state', 0);

global n node;
global rreq_out rreq_in rreq_forward;
global rreq_out_crosslayer rreq_in_crosslayer rreq_forward_crosslayer;
global rrep_out rrep_in rrep_forward;
global rrep_out_crosslayer rrep_in_crosslayer rrep_forward_crosslayer rrep_destination_crosslayer;

% Parameters
apptype = 'crosslayer_searching';    % or 'dht_searching'
log_file = 'log_crosslayer_';
% % max_time = 100;
% % ntopo = 2;
% % nsize = 2;
% % itraffic = 5;

max_time = var_max_time;
ntopo = var_ntopo;
nsize = var_nsize;
itraffic =var_itraffic;

for isize = 10:10:(10*nsize)
    n = isize;
    maxx = sqrt(100*100*n/30);
    maxy = maxx;
    disp([' ===== Network size = ' num2str(n) '  maxx = maxy = ' num2str(maxx) ' =====']);
    for itopo = 1:ntopo
        % Reset the parameters
        parameter;
        rand('state', itopo);
        randn('state', itopo);
        % Generate a random network topology
        node = topo(n, maxx, maxy, 0);
        node = [node, zeros(n, 2)];
        Event_list = [];
        for k=1:itraffic
            Event_list(k).instant = 1+100*k*slot_time;
            Event_list(k).type = 'send_app';
            Event_list(k).node = k;
            Event_list(k).app.type = apptype;
            Event_list(k).app.key = n+1-k;
            Event_list(k).app.id1 = k;
            Event_list(k).app.id2 = itopo;
            Event_list(k).app.route = [];
            Event_list(k).app.hopcount = 0;
            Event_list(k).net = [];
            Event_list(k).pkt = [];
        end
        % Run the simulation
        tstart = clock;
        run(Event_list', max_time, [log_file, num2str(n)]);
        disp(sprintf('--- Network size= %d, Topology id=%d, Running time=%g \n', n, itopo, etime(clock, tstart)));
        % Log the numbers of RREQ and RREP
        n1=sum(rreq_out);
        n2=sum(rreq_in);
        n3=sum(rreq_forward);
        n4=sum(rreq_out_crosslayer);
        n5=sum(rreq_in_crosslayer);
        n6=sum(rreq_forward_crosslayer);
        n7=sum(rrep_out);
        n8=sum(rrep_in);
        n9=sum(rrep_forward);
        n10=sum(rrep_out_crosslayer);
        n11=sum(rrep_in_crosslayer);
        n12=sum(rrep_forward_crosslayer);
        n13=sum(rrep_destination_crosslayer);
        fid = fopen([log_file num2str(n) '_rreqrrep'], 'a');
        if fid == -1, error(['Cannot open log file for RREQ and RREP']); end
        fprintf(fid, '%d %d %d %d %d %d %d %d %d %d %d %d %d %d \n', [itopo; n1; n2; n3; n4; n5; n6; n7; n8; n9; n10; n11; n12; n13]);
        fclose(fid);
    end
end

%%%  End Simulation  %%%%

set(handles.text2, 'String', 'Finish');

% save the changes to the structure
guidata(hObject,handles)



function edt_max_time_Callback(hObject, eventdata, handles)
% hObject    handle to edt_max_time (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edt_max_time as text
%        str2double(get(hObject,'String')) returns contents of edt_max_time as a double
input = str2double(get(hObject,'string'));
if isnan(input)
  errordlg('Numeric value Required','Invalid Input','modal')
  uicontrol(hObject)
  return
else
  %display(input);
end

% --- Executes during object creation, after setting all properties.
function edt_max_time_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edt_max_time (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton3.
function pushbutton3_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

close all force;

close(gcf);


% --- Executes on mouse press over axes background.
function axes1_ButtonDownFcn(hObject, eventdata, handles)
% hObject    handle to axes1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% --------------------------------------------------------------------
function initialize_gui(fig_handle, handles, isreset)
% If the metricdata field is present and the reset flag is false, it means
% we are we are just re-initializing a GUI by calling it from the cmd line
% while it is up. So, bail out as we dont want to reset the data.


% Update handles structure
guidata(handles.figure1, handles);



function edt_ntopo_Callback(hObject, eventdata, handles)
% hObject    handle to edt_ntopo (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edt_ntopo as text
%        str2double(get(hObject,'String')) returns contents of edt_ntopo as a double


% --- Executes during object creation, after setting all properties.
function edt_ntopo_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edt_ntopo (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edt_nsize_Callback(hObject, eventdata, handles)
% hObject    handle to edt_nsize (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edt_nsize as text
%        str2double(get(hObject,'String')) returns contents of edt_nsize as a double


% --- Executes during object creation, after setting all properties.
function edt_nsize_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edt_nsize (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edt_itraffic_Callback(hObject, eventdata, handles)
% hObject    handle to edt_itraffic (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edt_itraffic as text
%        str2double(get(hObject,'String')) returns contents of edt_itraffic as a double


% --- Executes during object creation, after setting all properties.
function edt_itraffic_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edt_itraffic (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
